import{_ as e,o as n,c as s,e as a}from"./app-41779d21.js";const t={},o=a(`<h1 id="powerdocs-extensibility-api-introduction" tabindex="-1"><a class="header-anchor" href="#powerdocs-extensibility-api-introduction" aria-hidden="true">#</a> PowerDocs extensibility API introduction</h1><p>The PowerDocs extensibility API is a JavaScript set of objects and methods that help you extend PowerDocs to fit your needs.</p><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h2><p>To create an extension, you need the following elements:</p><ul><li>JavaScript/TypeScript IDE like Visual Studio Code</li><li>PowerDocs installed with dev mode enabled</li></ul><h2 id="your-first-extension" tabindex="-1"><a class="header-anchor" href="#your-first-extension" aria-hidden="true">#</a> Your first extension</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>It is important to respect the name of default files. <code>manifest.xml</code> and <code>main.js</code> are required to make your extension work properly.</p></div><ol><li>Start by creating a folder in the <code>%USERPROFILE%\\AppData\\Local\\PowerDocs\\extensions\\</code> existing folder, for example <code>MyExtension</code>.</li><li>Create a file in this folder, called <code>manifest.xml</code>.</li><li>Create a file in this folder, called <code>main.js</code>.</li><li>Open the <code>main.js</code> file in your favorite IDE and start typing code.</li></ol><p>You must import the <code>PowerDocsExtension</code> class from the <code>PowerDocs.Lib</code> module like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>PowerDocsExtension<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;PowerDocs.Lib&#39;</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can instantiate your extension like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token comment">// instanciates the extension object</span>
<span class="token keyword">var</span> myExtensionInstance <span class="token operator">=</span> PowerDocsExtension<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, depending on your extension purpose, you can listen to some events, like that:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token comment">// listen to the &quot;documentLoaded&quot; event, which happens every time the editor loads a file</span>
myExtensionInstance<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&quot;documentLoaded&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),i=[o];function c(r,p){return n(),s("div",null,i)}const d=e(t,[["render",c],["__file","index.html.vue"]]);export{d as default};
